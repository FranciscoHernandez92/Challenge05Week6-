// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id             String   @id @default(cuid())
  name           String
  author         Author   @relation(fields: [authorId], references: [id])
  authorId       String
  category       String
  isPartOfSeries Boolean  @default(false)
  createAd       DateTime @default(now())
  updateAd       DateTime @updatedAt
  // ESTAS DOS ULTIMAS SIEMPRE TIENEN QUE ESTAR EN EL MODELO
}

model Author {
  id          String   @id @default(cuid())
  name        String   
  birthDate   DateTime
  email       String   @unique //EL UNICO QUIERE DECIR QUE NO PUEDE COINCIDIR Y ES LO QUE VAMOS A UTILIZAR PARA VALIDAR EL LOGIN
  password    String
  nacionality String
  role        Role      @default(user)
  createAd    DateTime @default(now())
  updateAd    DateTime @updatedAt
  book        Book[]
}

enum Role {
  user
  admin
  guest
}

// ESTO SON LOS MODELOS DE ALEJANDRO PARA EXPLICAR LAS RELACIONES 

// model Article {
//   id          String   @id @default(cuid())
//   title       String   
//   author      User     @relation(fields:[authorId], references:[id]) ---> PRIMERA RELACION EN EL MODELO ARTICLE CON EL MODELO USER
//   content     String
//   isPublished Boolean  @default(false)
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

// CUANDO YA TENEMOS LA PRIMERA RELACION EN EL MODELO TENEMOS QUE AÑADIR OTRA RELACION EN EL OTRO MODELO PARA COMPLETAR LA RELACION
// O TAMBIEN PUEDES EJECUTAR npx prisma format Y PRISMA AUTOMATICAMENTE TE AÑADE UN CAMPO DIRECTAMENTE 

// model User {
//   id        String   @id @default(cuid())
//   email     String   @unique
//   name      String
//   password  String
//   birthDate DateTime
//   role      Role     @default(user)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// enum Role {
//   user
//   admin
//   guest
// }
